#pragma once
#define LEXEMA_FIXSIZE	1			// фиксированный размер лексемы
#define LT_MAXSIZE		4096		// максимальное количество строк в таблице лексем
#define LT_TI_NULLIDX	0xfffffff	// нет элемента таблицы идентификаторов
#define LEX_INTEGER		't'	// лексема для integer
#define LEX_STRING		't'	// лексема для string
#define LEX_ID			'i'	// лексема для идентификатора
#define LEX_LITERAL		'l'	// лексема для литерала
#define LEX_FUNCTION	'f'	// лексема для function
#define LEX_RETURN		'r'	// лексема для return
#define LEX_RUNOUT		'p'	// лексема для runout
#define LEX_RUNIN		'p'	// лексема для runin
#define LEX_FOR			'o'	// лексема для for
#define LEX_MAIN		'm'	// лексема для main
#define LEX_SEMICOLON	';'	// лексема для ;
#define LEX_TWOPOINT	':'	// лексема для :
#define LEX_COMMA		','	// лексема для ,
#define LEX_LEFTBRACE	'{'	// лексема для {
#define LEX_BRACELET	'}'	// лексема для }
#define LEX_LEFTTHESIS	'('	// лексема для (
#define LEX_RIGHTTHESIS	')'	// лексема для )
#define LEX_PLUS		'v'	// лексема для +
#define LEX_MINUS		'v'	// лексема для -
#define LEX_STAR		'v'	// лексема для *
#define LEX_DIRSLASH	'v'	// лексема для /
#define LEX_OPERATOR	'v'	// лексема для операторов
#define LEX_LOGOPERATOR 'q' // лексема для логических операторов
#define LEX_SMALL		'q' // <
#define LEX_BIG			'q' // >
#define LEX_AND			'&' // &
#define LEX_EXL			'q' // !
#define LEX_TILDA		'q' // ~
#define LEX_EQUAL		'='
#define LEX_ROOF		'^'
#define LEX_IF			'w' // лексема уловия
#define LEX_VOID		'n' // лексема void
#define LEX_ENDIF		'|' // Конец условия
#define TI_NULLIDX		0xffffffff
namespace LT		// таблица лексем
{
	struct Entry	// строка таблицы лексем
	{
		unsigned char lexema;	// лексема
		int sn;					// номер строки в исходном тексте
		int idxTI = TI_NULLIDX;				// индекс в таблице идентификаторов или LT_TI_NULLIDX
	};

	struct LexTable				// экземпляр таблицы лексем
	{
		int max_size;			// емкость таблицы лексем < LT_MAXSIZE
		int size;				// текущий размер таблицы лексем < max_size
		Entry* table;			// массив строк таблицы лексем
	};

	LexTable Create(		// создать таблицу лексем
		int size			// емкость таблицы лексем < LT_MAXSIZE
	);

	void Add(				// добавить строку в таблицу лексем
		LexTable& lextable,	// экземпляр таблицы лексем
		Entry entry			// строка таблицы лексем
	);
	void Add(LexTable& lextable, Entry entry, int i);

	Entry GetEntry(			// получить строку таблицы лексем
		LexTable& lextable,	// экземпляр таблицы лексем
		int n				// номер получаемой строки
	);

	void Delete(LexTable& lextable);	// удалить таблицу лексем (освободить память)

	Entry writeEntry(					// заполнить строку таблицы лексем
		Entry& entry,
		unsigned char lexema,
		int indx,
		int line
	);
	void writeLexTable(std::ostream* stream, LT::LexTable& lextable);
	void showTable(LexTable lextable, std::ostream *fout);	// вывод таблицы лексем

};